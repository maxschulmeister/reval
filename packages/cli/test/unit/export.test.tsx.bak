import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import React from 'react';
import { render } from 'ink-testing-library';
import { waitForComponentCompletion } from '../utils';
import Export from '../../src/commands/export.tsx';

// Mock @reval/core
vi.mock('@reval/core', () => ({
  exportRun: vi.fn(),
}));

// Mock fs
vi.mock('fs', async () => {
  const actual = await vi.importActual('fs');
  return {
    ...actual,
    writeFileSync: vi.fn(),
  };
});

import { exportRun } from '@reval/core';
import * as fs from 'fs';

const mockExportRun = vi.mocked(exportRun);
const mockWriteFileSync = vi.mocked(fs.writeFileSync);

describe('Export Command', () => {
  beforeEach(() => {
    vi.resetAllMocks();
  });

  afterEach(() => {
    vi.resetAllMocks();
  });

  const mockJsonData = JSON.stringify({ 
    id: 'run123', 
    executions: [{ id: 'exec1', result: 'test' }] 
  }, null, 2);
  
  const mockCsvData = 'id,runId,features,target,result\nexec1,run123,"input","output","result"';

  it('exports run data in JSON format by default', async () => {
    mockExportRun.mockResolvedValue(mockJsonData);
    
    const { lastFrame } = render(
      <Export args={['run123']} options={{ format: 'json' }} />
    );
    
    const output = lastFrame();
    expect(output).toContain('Export completed!');
    expect(output).toContain('Run ID: run123');
    expect(output).toContain('Format: JSON');
    expect(output).toContain('Output file: reval-export-run123de.json');
    
    expect(mockExportRun).toHaveBeenCalledWith('run123', 'json');
    expect(mockWriteFileSync).toHaveBeenCalledWith(
      'reval-export-run123de.json',
      mockJsonData,
      'utf8'
    );
  });

  it('exports run data in CSV format', async () => {
    mockExportRun.mockResolvedValue(mockCsvData);
    
    const { lastFrame } = render(
      <Export args={['run123']} options={{ format: 'csv' }} />
    );
    
    const output = lastFrame();
    expect(output).toContain('Export completed!');
    expect(output).toContain('Format: CSV');
    expect(output).toContain('Output file: reval-export-run123de.csv');
    
    expect(mockExportRun).toHaveBeenCalledWith('run123', 'csv');
    expect(mockWriteFileSync).toHaveBeenCalledWith(
      'reval-export-run123de.csv',
      mockCsvData,
      'utf8'
    );
  });

  it('uses custom output file path when provided', async () => {
    mockExportRun.mockResolvedValue(mockJsonData);
    
    const { lastFrame } = render(
      <Export args={['run123']} options={{ format: 'json', out: 'custom-results.json' }} />
    );
    
    const output = lastFrame();
    expect(output).toContain('Output file: custom-results.json');
    
    expect(mockWriteFileSync).toHaveBeenCalledWith(
      'custom-results.json',
      mockJsonData,
      'utf8'
    );
  });

  it('handles export error from core', async () => {
    mockExportRun.mockRejectedValue(new Error('Run not found'));
    
    const { lastFrame } = render(
      <Export args={['nonexistent']} options={{ format: 'json' }} />
    );
    
    const output = lastFrame();
    expect(output).toContain('Error exporting run:');
    expect(output).toContain('Run not found');
    expect(output).toContain("Use 'reval list' to see available runs");
  });

  it('handles file write error', async () => {
    mockExportRun.mockResolvedValue(mockJsonData);
    mockWriteFileSync.mockImplementation(() => {
      throw new Error('Permission denied');
    });
    
    const { lastFrame } = render(
      <Export args={['run123']} options={{ format: 'json' }} />
    );
    
    const output = lastFrame();
    expect(output).toContain('Error exporting run:');
    expect(output).toContain('Permission denied');
  });

  it('shows exporting state initially', () => {
    mockExportRun.mockImplementation(() => new Promise(() => {})); // Never resolves
    
    const { lastFrame } = render(
      <Export args={['run123']} options={{ format: 'json' }} />
    );
    
    const output = lastFrame();
    expect(output).toContain('Exporting run run123...');
    expect(output).toContain('Format: JSON');
  });

  it('generates correct default filename for CSV', async () => {
    mockExportRun.mockResolvedValue(mockCsvData);
    
    const { lastFrame } = render(
      <Export args={['abcdef123456']} options={{ format: 'csv' }} />
    );
    
    const output = lastFrame();
    expect(output).toContain('Output file: reval-export-abcdef12.csv');
  });
});